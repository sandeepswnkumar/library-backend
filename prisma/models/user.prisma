model UserType {
  id        Int      @id @default(autoincrement())
  name      String
  createdBy Int?
  createdAt DateTime @default(now())

  users User[]
}

model User {
  id              Int       @id @default(autoincrement())
  email           String?   @unique
  password        String?
  roleId          Int
  phone           String?   @unique
  isActive        Boolean   @default(true)
  userTypeId      Int
  emailVerifiedAt DateTime?
  phoneVerifiedAt DateTime?
  rememberToken   String?
  refreshToken    String?
  isMpin          Boolean?  @default(false)
  otp             String? // store temporary OTP (optional, could store in Redis)
  otpExpiresAt    DateTime?
  createdBy       Int?
  updatedBy       Int?
  deletedBy       Int?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?

  roles         Role           @relation(fields: [roleId], references: [id])
  userType      UserType       @relation(fields: [userTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userDetails   UserDetails?
  tokens        Token[]
  userLibraries UserLibrary[]
  bookings      Booking[]
  payments      Payment[]
  invoice       Invoice[]
  notifications Notification[]
}

model UserDetails {
  id         Int       @id @default(autoincrement())
  userId     Int       @unique
  firstName  String?
  middleName String?
  lastName   String?
  fullName   String?
  address1   String?
  address2   String?
  cityId     Int?
  stateId    Int?
  countryId  Int?
  pincode    String?
  createdBy  Int?
  updatedBy  Int?
  deletedBy  Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  city    City?    @relation(fields: [cityId], references: [id])
  state   State?   @relation(fields: [stateId], references: [id])
  country Country? @relation(fields: [countryId], references: [id])
}
