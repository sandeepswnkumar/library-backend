model LibraryType {
  id        Int      @id @default(autoincrement())
  name      String
  color     String?
  createdBy Int?
  createdAt DateTime @default(now())

  libraries Library[]
}

model LibraryStatus {
  id        Int      @id @default(autoincrement())
  name      String
  color     String?
  createdBy Int?
  createdAt DateTime @default(now())

  libraries Library[]
}

model Library {
  id          Int       @id @default(autoincrement())
  libraryName String    @unique
  diamension  String?
  floor       Int?
  capacity    Int?
  statusId    Int
  typeId      Int
  createdBy   Int?
  updatedBy   Int?
  deletedBy   Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  type       LibraryType       @relation(fields: [typeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  status     LibraryStatus     @relation(fields: [statusId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  locations  LibraryLocation[]
  facilities LibraryFacility[]
  users      UserLibrary[]
}

model LibraryLocation {
  id           Int       @id @default(autoincrement())
  locationName String
  libraryId    Int
  email        String?
  phone        String?
  address1     String?
  address2     String?
  cityId       Int?
  stateId      Int?
  countryId    Int?
  pincode      String?
  latitude     String?
  longitude    String?
  mapUrl       String?
  isActive     Boolean   @default(true)
  createdBy    Int?
  updatedBy    Int?
  deletedBy    Int?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  library          Library           @relation(fields: [libraryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  city             City?             @relation(fields: [cityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  state            State?            @relation(fields: [stateId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  country          Country?          @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  facilities       LibraryFacility[]
  users            UserLibrary[]
  bookings         Booking[]
  LibraryBooking   LibraryBooking?   @relation(fields: [libraryBookingId], references: [id])
  libraryBookingId Int?
}

model LibraryFacility {
  id                Int       @id @default(autoincrement())
  libraryId         Int
  libraryLocationId Int
  name              String
  description       String?
  imageUrl          String?
  createdBy         Int?
  updatedBy         Int?
  deletedBy         Int?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deletedAt         DateTime?

  library  Library         @relation(fields: [libraryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  location LibraryLocation @relation(fields: [libraryLocationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model LibraryBooking {
  id                Int       @id @default(autoincrement())
  libraryId         Int
  libraryLocationId Int
  bookingUnitId     Int
  rate              Float     @default(0)
  createdBy         Int?
  updatedBy         Int?
  deletedBy         Int?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deletedAt         DateTime?

  bookingUnit BookingUnit       @relation(fields: [bookingUnitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  locations   LibraryLocation[]
}

model UserLibrary {
  id                Int      @id @default(autoincrement())
  libraryId         Int
  libraryLocationId Int
  userId            Int
  createdBy         Int?
  createdAt         DateTime @default(now())

  library  Library         @relation(fields: [libraryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  location LibraryLocation @relation(fields: [libraryLocationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([libraryId, libraryLocationId, userId])
}
