model BookingUnit {
  id        Int      @id @default(autoincrement())
  name      String
  rate      Float
  createdBy Int?
  createdAt DateTime @default(now())
}

model BookingStatus {
  id        Int      @id @default(autoincrement())
  name      String
  color     String?
  createdBy Int?
  createdAt DateTime @default(now())

  bookings Booking[]
}

model Booking {
  id                Int       @id @default(autoincrement())
  libraryLocationId Int
  userId            Int
  statusId          Int
  expireOn          DateTime?
  isExpired         Boolean   @default(false)
  amount            Float
  createdBy         Int?
  updatedBy         Int?
  deletedBy         Int?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deletedAt         DateTime?

  location LibraryLocation  @relation(fields: [libraryLocationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user     User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  status   BookingStatus    @relation(fields: [statusId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  details  BookingDetails[]
  payments Payment[]
}

model BookingDetails {
  id         Int      @id @default(autoincrement())
  bookingId  Int
  unit       String
  rate       Float
  noOfUnit   Int
  start_date DateTime
  start_time DateTime

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
