model Payment {
  id            Int       @id @default(autoincrement())
  userId        Int
  bookingId     Int
  amount        Float
  methodId      Int
  statusId      Int
  transactionId String?
  paidAt        DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user    User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  booking Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  method  PaymentMethod @relation(fields: [methodId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  status  PaymentStatus @relation(fields: [statusId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model PaymentMethod {
  id        Int      @id @default(autoincrement())
  name      String
  color     String?
  createdBy Int?
  createdAt DateTime @default(now())

  payments Payment[]
}

model PaymentStatus {
  id        Int      @id @default(autoincrement())
  name      String
  color     String?
  createdBy Int?
  createdAt DateTime @default(now())

  payments Payment[]
}
